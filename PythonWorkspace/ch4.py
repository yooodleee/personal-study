#4.1 문자열 다루기

#문자열:문자들의 집합
#파이썬에서는 한글이나 알파벳 등으로 작성한 글자를 작은따옴표 또는 큰따옴표로 감싸서 문자열임을 나타낸다.

sentence1='나는 소년입니다.'
print(sentence1)

sentence2="파이썬은 쉬워요"
print(sentence2)

#두 실행 결과만으로는 문자열인지 확인하기 어렵다.type()을 사용해 문자열인지 확인해보자
#type()은 소괄호 안에 확인하고 싶은 데이터를 넣고 출력하면 데이터가 어떤 형태인지 보여줌

sentence1='나는 소년입니다.'
print(sentence1, type(sentence1)) #작은따옴표-> 실행 결과:문자열

sentence2="파이썬은 쉬워요"
print(sentence2, type(sentence2)) #큰따옴표-> 살행 결과:문자열

#문자열을 여러 줄에 걸쳐 작성할 때에는 여는 따옴표와 닫는 따옴표를 각각 3개씩(큰따옴표 또는 작은따옴표) 넢어 앞뒤로 감싸 주면 됨
#그러면 안에 든 모든 글자를 문자열로 인식함

sentence3="""  
나는 소년이고, 
파이썬은 쉬워요.
"""             #여는 따옴표와 닫는 따옴표를 각각 3개씩 앞뒤로 감싸
print(sentence3)




#4.2 인덱스(index):여러 문자로 구성된 문자열의 n번째 문자(데이터)라고 할 때, n번째가 인덱스다-> 인덱스는 데이터의 순서 또는 위치
#인덱스는 데이터를 저장한 변수명에 대괄호([])를 붙이고 그 안에 숫자를 넣어 표시함
#변수명 [인덱스]

jumin="990229-1234567"
print("성별 식별번호 : "+jumin[7]) #대괄호([]) 안에 7을 쓴 이유:코드에서 위치를 나타내는 인덱스는 1이 아닌 0부터 시작하기 때문

#슬라이싱(slicing):원하는 만큼 데이터를 자를 수 있음
#대괄호 안에 인덱스를 넣고 필요한 범위를 콜론(:)으로 구분해 표시함
#변수명 [시작 인덱스:종료 인덱스]

jumin="990229-1234567"
print("연 : "+jumin[0:2]) #0부터 2직전까지(0,1), 99
print("월 : "+jumin[2:4]) #2부터 4직전까지(2,3), 02
print("일 : "+jumin[4:6]) #4부터 6직전까지(4,5), 29


#슬라이싱할 때 범위를 나타내는 시작 인덱스나 종료 인덱스를 비우면, 비워둔 위치에 따라 슬라이싱 범위가 달라짐

#변수명 [:종료 인덱스]-> 처음부터 종료 인덱스 직전까지 슬라이싱
#변수명 [시작 인덱스:]->시작 인덱스부터 끝까지 슬라이싱
#변수명 [:]->처음부터 끝까지 슬라이싱

print("생년월일 : "+jumin[:6]) #처음부터 6직전까지->jumin[0:6]과 동일, 990229
print("주민등록번호 뒷자리 : "+jumin[7:]) #7부터 끝까지->jumin[7:14]과 동일, 1234567


#뒤에서부터도 슬라이싱이 가능함, 이때 음수 인덱스를 사용함
#단, 양수 인덱스일 때는 0부터 시작하지만, 음수 인덱스일 때는 -1부터 시작함에 주의

print("주민등록번호 뒷자리(뒤에서부터): "+jumin[-7:]) #뒤에서 7번째 위치부터 끝까지, 1234567




#4.3 함수로 문자열 처리하기


#문자열을 다루는 데 사용되는 다양한 함수들

#lower(): 문자열을 소문자로 변환
#upper(): 문자열을 대문자로 변환
#islower(): 문자열이 소문자인지 확인
#isupper(): 문자열이 대문자인지 확인
#replace(): 문자열 바꾸기
#index(): 찾는 문자열의 인덱스(없으면 오류 발생)
#find(): 찾는 문자열의 인덱스(없으면 -1 반환)
#count(): 문자열이 나온 횟수


#문자열 처리 함수는 문자열(또는 문자열을 담은 변수)과 함수를 점(.)으로 연결해서 사용함
#문자열(또는 변수).함수()

python="Python is Amazing"

print(python.lower()) #전체 소문자로 변환
print(python.upper()) #전체 대문자로 변환
print(python[1:3].islower()) #인덱스 1~3째 자리에 소문자가 있는가, yth가 소문자이므로 True
print(python[0].isupper()) #인덱스 0번째 자리에 대문자가 있는가, P가 대문자이므로 True
print(python.replace("Python", "java")) #Python을 Java로 바꾸기


#어떤 문자가 문자열의 어느 위치에 있는가는 find()와 index()
#시작 인덱스와 종료 인덱스 사이에서 지정한 문자를 찾는데, 시작 인덱스와 종료 인덱스는 생략 가능함
#find(찾는 문자, 시작 인덱스, 종료 인덱스)-> 찾는 문자가 없다면 -1을 반환 후 다음 문장을 실행
#index(찾는 문자, 시작 인덱스, 종료 인덱스)-> 찾는 문자가 없다면 오류(ValueError:substring not found)가 발생하면서 이후 문장을 수행하지 않고 프로그램을 종료함

python="Python is Amazing"

find=python.find("n") #처음 발견한 n의 인덱스, 'Python'에서 n(인덱스 5)
print(find)
find=python.find("n", find+1) #인덱스 6 이후부터 찾아 처음 발견한 n의 인덱스, 'is Amazing'에서 n(인덱스 15)
print(find)
find=python.find("Java") #Java가 없으면 -1을 반환(출력)한 후 프로그램을 계속 수행
print(find)

index=python.index("n") #처음 발견한 n의 인덱스, 'Python'에서 n(인덱스 5)
print(index)
index=python.index("n", index+1) #인덱스 6 이후부터 찾아 처음 발견한 n의 인덱스, 'is Amazing'에서 n(인덱스 15)
print(index)
index=python.index("n", 2, 6) #'thon'에서 n(인덱스 5)
print(index)
#Java가 없으면 오류 발생하며 프로그램 종료



#count()함수는 지정한 문자 또는 문자열이 총 몇 번 나오는지 횟수를 확인할 수 있음
#만약 해당 문자나 문자열이 없다면 0으로 표시함

python="Python is Amazing"

print(python.count("n")) #2
print(python.count("v")) #0


#len()함수는 문자열의 길이 정보를 알려줌, 이때 공백도 포함한 문자열의 길이
#앞서 다룬 문자열 처리 함수는 문자열(또는 변수).count() 형태로 사용하지만, len()함수는 다음처럼 len(문자열 또는 변수)형태로 사용함

python="Python is Amazing"

print(len(python))




#4.4 문자열 포매팅

# +연산자를 사용하면 문자열 사이를 띄어 쓰지 않고 연결하지만, 쉼표를 사용하면 한 칸 띄어 쓴 채 연결함

print("ab"+"ab")
print("ab", "ab")

#문자열과 다른 자료형을 연결하려면 형변환이 필요함->형변환 없이 문자열과 다른 자료형을 연결하는 방법
#원하는 위치에 특정한 값(변수)을 넣어 하나의 문자열로 표현하는 방법:문자열 포매팅(string form atting)


#4.4.1 서식 지정자(format specifier) 사용하기
# %뒤에 자료형을 나타내는 문자가 붙는다
#형식: print("문자열 서식 지정자 문자열" % 값)

#%d: 정수(decimal)
#%f: 실수(floating-point)
#%c: 문자(character)
#%s: 문자열(string), 정수 문자 문자열 등과 상관없이 모든 값을 넣을 수 있음

print("나는 %d 살입니다." % 20) #정수
print("나는 %s을 좋아합니다." % "파이썬") #문자열
print("Apple은 %c로 시작해요" % "A") #문자
print("나는 %s 살입니다." % 20) #%s로도 정수값 표현 가능, 문자열

#문자열 안에 값을 2개 이상 넣고 싶다면 원하는 위치에 서식 지정자를 원하는 만큼 넣는다.
#문자열에 넣을 값들을 쉼표로 구분한 후 소괄호로 감싸서 %뒤에 넢는다.
#그러면 값이 순서대로 문자열의 서식 지정자 위치에 들어간다.

print("나는 %s색과 %s색을 좋아해요." % ("파란", "빨간")) #값이 여럿일 때, 문자열


#4.4.2 format() 함수 사용하기
#형식:print("문자열{인덱스} 문자열{인덱스}...".format(값1, 값2, ...))

print("나는 {}살입니다.".format(20)) #문자열에 비어 있는 중괄호만 표시하면 값이 순서대로 들어감
print("나는 {}색과 {}색을 좋아해요.".format("파란", "빨간"))
print("나는 {0}색과 {1}색을 좋아해요.".format("파란", "빨간")) #{0},{1}처럼 인덱스를 넣으면 인덱스에 맞춰 {0}위치에는 값1, {1}위치에는 값2가 들어감
print("나는 {1}색과 {0}색을 좋아해요.".format("파란", "빨간")) #순서를 뒤집어서 넣으면 값도 순서가 바뀌어서 나오게 됨

#중괄호 안에 이름을 넣을 수도 있음
#형식: print("문자열{이름1} 문자열{이름2}...".format(이름1=값1, 이름2=값2,...))
#중괄호에 이름을 넣고 format()함수에 이름과 값을 정의하면 중괄호 위치에 이름에 해당하는 값이 들어감.변수를 사용하는 것과 비슷함

print("나는 {age}살이며, {color}색을 좋아햐요.".format(age=20, color="빨간"))
print("나는 {age}살이며, {color}색을 좋아햐요.".format(color="빨간", age=20)) #값을 이름으로 직접 지정하므로 중괄호와 format함수에서 이름 순서가 달라도 상관 없음


#4.4.3 f-문자열(f-string) 사용하기
#문자열 앞에 f를 추가하면 문자열이 나오기 전에 정의한 변수의 값을 문자열에서 사용할 수 있음
#단, 이 방법은 파이썬 3.6 버전 이상일 때만 사용 가능
#형식: print(f"문자열{변수명1} 문자열{변수명2}...")

age=20 #변수 age 정의
color="빨간" #변수 color 정의
print(f"나는 {age}살이며, {color}색을 좋아해요.")


#4.5 탈출 문자

#4.5.1 \n

print("백문이 불여일견 백견이 불여일타")
print("백문이 불여일견\n백견이 불여일타") #두줄로 출력, 문자열 안에서 줄 바꿈할 때 사용함

#4.5.2 \"와 \'

print("저는 '나도 코딩 '입니다.")
print('저는 "나도 코딩 "입니다.')

print("저는 \"나도 코딩\"입니다.")
print("저는 \'나도 코딩\'입니다.")

#4.5.3 \\

#print("C:\Users\Nadocoding\Desktop\PythonWorkspace") #코드에서 탈출 문자의 형태를 띈 곳이 보인다, \U \N \D \P
#유효하지 않은(실제 없는) 탈출 문자를 포함하면 오류가 나타남
#또는 경로 안에 \n과 같이 유효한 형태의 탈출 문자가 있으면 실제 출력하고자 하는 값과는 다르게 두 줄로 출려되는 등의 상황이 발생할 수 있음

#print("C:\\Users\\Nadocoding\\Desktop\\PythonWorkspace") 
#문자열 앞에 r을 붙이는 방법도 있다.r을 추가하면 문자열 내에 어떤 값이 있든지(탈출 문자가 포함돼 있어도) 무시하고 그래도 출력함

#print(r"C:\Users\Nadocoding\Desktop\PythonWorkspace") 


#4.5.4 \r

#커서를 맨 앞으로 이동시킴, 그리고 해당 위치에서 \r 다음에 오는 문자열을 출력함

print("Red Apple\r Pine") #\r을 만나면 커서를 맨 앞, 즉 Red 앞으로 이동시킴, 그리고 해당 위치에서 \r 다음에 오는 Pine을 출력-> Red를 덮어 쓰는 효과(Pine Apple)


#4.5.5 \b

#키보드의 백스페이스 역할->앞 글자 하나를 삭제

print("Redd\bApple") #RedApple


#4.5.6 \t

#키보드의 tab키 역할->여러 칸을 띄어 씀

print("Red\tApple") #Red    Apple, 실행결과가 표시되는 터미널에서는 8칸이 기준
#8칸은 글자와 글자 사이의 간격이 아니라 첫 번째 글자로부터 8칸이다.따라서 Red의 R부터 8칸 뒤에 떨어진 곳에 Apple을 출력함




#4.6 실습 문제:비밀 번호 만들기

#사이트 별로 비밀번호를 생성하는 프로그램을 작성하세요

#http://naver.com
#http://daum.net
#http://google.com
#http://youtube.com

#조건:http://부분은 제외함, 처음 만나는 점(.) 이후 부분도 제외함(공백으로 생각해 봐), 남은 글자 중에 첫 세자리+글자 개수+글자 내 'e'의 개수+'!'로 구성함
#실행 결과: http://naver.com의 비밀번호는 nav51!입니다.

url="http://naver.com"
my_str=url.replace("http;//", "") #조건1, naver.com("http://"를 공백으로 바꿈)
my_str=my_str[:my_str.index(".")] #조건2, naver(점의 위치 정보를 받아 슬라이싱(자르기)함)
password=my_str[:3]+str(len(my_str))+str(my_str.count("e"))+"!" #조건3, naver에서 3번째 자리 직전까지(nav)+문자열의 길이와 e가 나오는 개수(5,1)+!

print("{0}의 비밀번호는 {1}입니다.".format(url, password))

#조건1:replace()함수로 입력받은 url 변수의 값 중에서 "http://"을 ""로 대체함, 그러면 문자열에서 "http://"부분이 없어짐.
#이때 변경한 값을 다시 my_str 변수에 저장해야 변경한 값이 반영된다.

#조건2: my_str.index(".")을 하면 처음으로 발견하는 점의 위치 정보를 알 수 있다.위치 정보를 알았으니 문자열의 처음 위치부터 점 위치 직전까지 슬라이싱함

#조건3: 남은 글자(naver) 중 처음 세 자리는 슬라이싱으로 구할 수 있다.따라서 my_str[:3]을 하면 됨.글자 개수는 len() 함수로 문자열의 길이를 알아내면 되고, 
#글자 내 'e'의 개수는 count() 함수로 확인한다.여기에 마지막으로 느낌표를 연결하면 끝난다.
#여러 값을 하나의 문자열로 합쳐야 하는데, len() 함수와 count() 함수로 구하는 값은 정수형이다.따라서 str()로 감싸서 문자열로 바꾼 후 +연산자로 모두 더한다.


url="http://google.com"
my_str=url.replace("http://", "")
my_str=my_str[:my_str.index(".")]
password=my_str[:3]+str(len(my_str))+str(my_str.count("e"))+"!"

print("{0}의 비밀번호는 {1}입니다.".format(url, password))

url="http://hamgle.com"
my_str=url.replace("http://", "")
my_str=my_str[:my_str.index(".")]
password=my_str[:3]+str(len(my_str))+str(my_str.count("e"))+"!"

print("{0}의 비밀번호는 {1}입니다.".format(url, password))