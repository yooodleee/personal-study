// 매개변수를 일반 변수로 선언

/**
 * C++ 언어에서는 포인터 대신 사용할 수 있는 '레퍼런스'라는 변수 형식을 제공한다. 
 * 레퍼런스는 포인터보다 상대적으로 개념이 간단해 이해가 쉽고 잘못 사용할 가능성을 줄여 준다. 
 * 물론 포인터를 제대로 다룰 수 있다면 최적화와 성능을 향상시킬 수 있지만, 그렇지 못하더라도
 * 레퍼런스 덕분에 포인터의 이점을 그대로 누릴 수 있다. 
 */

/**
 * 레퍼런스 사용하기
 * 
 * 먼저 C++ 언어에서 제공하는 4가지 변수 형식을 나열하면 다음과 같다. 
 * - 일반 변수: 값을 저장하는 변수
 * - 포인터 변수: 메모리 주소를 저장하는 변수
 * - 레퍼런스: 변수에 또 다른 이름, 별칭(별명)을 부여
 * 
 * 우선, 일반 변수를 사용했을 때 문제점을 살펴보고 레퍼런스를 사용하는 이유에 대해 알아보자. 
 */

#include <iostream>
using namespace std;


void swap(int a, int b)
{
	// swap 함수 내 교환 전 a, b 값 
	cout << "[swap func] before swap, a: " << a << " b: " << b << endl;

	int temp = a;
	a = b;
	b = temp;

	// // swap 함수 내 교환 후 a, b 값
	cout << "[swap func] after swap, a: " << a << " b: " << b << endl;
}


int main()
{
	int a = 5, b = 10;

	// swap 함수 호출 전 a, b 값 
	cout << "[main] before swap, a: " << a << " b: " << b << endl << endl;

	swap(a, b);

	// swap 함수 호출 후 a, b 값 
	cout << "[main] after swap, a: " << a << " b: " << b << endl;

	return 0;
}

/*
[main] before swap, a: 5, b: 10

[swap func] before swap, a: 5 b: 10
[swap func] after swap, a: 10 b: 5

[main] after swap, a: 5 b: 10
*/

/**
 * 예에서 swap은 매개변수로 받은 두 정수를 서로 변경해 주는 함수이다. 함수의 매개변수로 
 * 선언된 변수 a, b의 값이 서로 바뀌도록 구문을 작성했다. main 내부에서 지역 변수로 a, b
 * 변수를 만든 후 swap 함수를 호출해 a, b의 값이 바뀌도록 작성했다. 그리고 swap 호출 이전과
 * 이후의 값을 비교하기 위해 출력하는 코드도 작성했다. 
 * 
 * 이 프로그램은 다음과 같이 a와 b의 값이 서로 바뀌기를 기대했지만, 막상 실제 실행 결과는 
 * 예상과 다른 것을 확인할 수 있다. 값이 바뀌지 않은 것이다. 
 * 
 * [swap 함수에 기대한 결과와 실제 결과]
 * 
 * (a = 5  b = 10)	>>>	 (a = 10 b = 5)		// 기대한 결과
 * (a = 5  b = 10)	>>>	 (a = 5 b = 10)		// 실제 결과
 * 
 * 값이 바뀌지 않은 이유는 main의 a, b와 swap의 a, b 변수가 서로 다른 범위(scope)에 있기 때문이다. 
 * 즉, 이름만 같을 뿐 메모리에서 서로 다른 공간에 저장돼 있다. 따라서 swap 함수를 호출할 때 인자로
 * 넘긴 5, 10은 swap 함수의 지역 변수인 a, b에 복사 저장되어 swap 함수에 있는 a, b 변숫값만 교환된다. 
 * main 함수의 a, b 변숫값은 전혀 변화가 없다. 
 * 
 * 이처럼 값을 전달하는 호출 방식을 '값에 의한 호출(call by value)'이라고 한다. 
 * 값에 의한 호출에서는 값이 매개변수로 복사되어 함수 영역에서 새로운 변수가 된다. 
 * 
 * 이때 레퍼런스를 이용하면 문제를 간단하게 해결할 수 있다. 레퍼런스 변수는 다음처럼 변수 이름 앞에 & 연산자
 * 기호로 선언한다. &는 주소 연산자와 같은 기호지만 의미는 완전히 다르다. 레퍼런스로 사용할 때는 메모리 주소가
 * 아닌 원본 변수를 참조하겠다는 의미이다. 
 * 
 * >>> 자료형 &레퍼런스_변수_이름 = 대상_변수_이름;
 */