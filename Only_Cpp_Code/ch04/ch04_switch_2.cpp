// switch 문에서 break 문 생략

/**
 * 만약 case 문에서 switch 문을 빠져나가게 하는 break 키워드를 쓰지 않으면, 일치하는 case부터
 * default까지 모든 구문이 실행된다. break를 생략한 후 실행해보자. 
 */

#include <iostream>
using namespace std;


int main() {

	int input_number;

	cout << "1 ~ 5 정수 입력 : ";
	cin >> input_number;


	switch (input_number)
	{
		// 일치하는 case 부터 모든 구문 실행 
	case1:
		cout << "입력한 수는 1 입니다." << endl;
	case2:
		cout << "입력한 수는 2 입니다." << endl;
	case3:
		cout << "입력한 수는 3 입니다." << endl;
	case4:
		cout << "입력한 수는 4 입니다." << endl;
	case5:
		cout << "입력한 수는 5 입니다." << endl;
	default:
		cout << "입력한 수는 1 ~ 5 범위 밖입니다." << endl;
	}

	return 0;
}

/**
 * 1 ~ 5 정수 입력: 2
 * 입력한 수는 2 입니다.
 * 입력한 수는 3 입니다. 
 * 입력한 수는 4 입니다. 
 * 입력한 수는 5 입니다. 
 * 입력한 수는 1 ~ 5 범위 밖입니다. 
 */

/**
 * 결과를 보면 case 2부터 default까지 모든 구문이 차례로 실행된 것을 확인할 수 있다. 
 * 이러한 특징을 이용해 실행 흐름을 만들 수도 있지만, 자칫하면 의도하지 않은 오류가 발생할
 * 수 있다. 따라서 case 문을 작성할 때는 break 키워드에 따른 실행 흐름을 생각해야 한다. 
 */

/**
 * if 문과 switch 문 중 어느 것이 더 빠를까? 어느 것을 사용해야 할까?
 * 
 * if 문과 switch 문의 성능 차이는 대개 무시할 수 있을 정도다. 최신 컴파일러는 코드 최적화에
 * 꽤 능숙해서 둘 다 기계어 코드를 효율적으로 생성할 수 있다. 둘 중 어느 것을 사용해야 하는지는
 * 무엇을 하려고 하느냐에 따라 다르다. 여러 값을 대상으로 단일 변수를 검사할 때는 switch 문이
 * 가독성이 좋고 유지, 관리하기도 쉬울 수 있다.  하지만 서로 다른 변수나 표현식이 포함된 여러 
 * 조건을 검사할 때는 if 문이 더 적합할 수 있다. 
 * 
 * 핵심은 명확하고 읽기 쉬우며 이해하기 쉬운 코드를 작성하는 것이므로 해결하려는 문제에 따라
 * 가장 적합한 구문을 선택하면 된다. 
 */