// do ~ while 반복문

/**
 * do ~ while 문의 동작 방식
 * 
 * do ~ while은 while 문처럼 동작하지만, while 조건시깅 구문의 처음의 아닌 마지막에 나온다. 
 * 따라서 코드 블록을 먼저 실행한 다음, 조건을 검사하므로 최소한 한 번은 실행되도록 보장할
 * 수 있다. 
 */

#include <iostream>
using namespace std;


int main() {

	// 반복 조건식이 아래쪽에 있어서 최소한 한 번은 실행된다.
	int count = 0;

	do {
		cout << count << endl;
		count++;
	} while (count < 5);

	return 0;
}

/*
0
1
2
3
4
*/

/**
 * 이 예에서 count 변숫값이 0으로 시작하는 do ~ while 문이 등장한다. 반복문 블록 내부의
 * 코드가 먼저 실행된 후, 조건식이 count < 5를 확인하고 그 결과에 따라 반복 여부를 판단한다. 
 * 조건식에 사용된 count 변수는 반복 실행될 때마다 1씩 증가하다 5가 되면 반복을 멈추고 while
 * 문을 종료한다. 결과는 앞서 보았던 while 문의 예처럼 0 ~ 4까지의 숫자가 출력된다. 
 * 
 * do (조건식)
 * {
 * 		// 실행문(반복 본문)
 * 
 * 		// 조건 업데이트 
 * } while (조건식)		=> 조건이 참이면 
 * 
 * 반복 구문 밖 	=> 조건이 거짓이면 
 */

/**
 * while과 do ~ while 문의 실행 결과가 같다고 해서 두 반복문을 같은 것으로 혼동하면 안 된다. 
 * while과 do ~ while 문의 주요 차이점은 조건을 평가하는 순서이다. 
 * 
 * while 문은 반복을 시작하기 전에 먼저 조건을 평가한다. 조건이 false면 코드 블록이 전혀 실행되지
 * 않는다. 즉, 조건이 처음부터 false면 반복문 내부의 코드가 실행되지 않는다. 
 * 
 * 반면에 do ~ while 문은 먼저 반복을 시작하고 나서 조건을 평가한다. 즉, 반복문 내부의 코드는 조건이
 * 처음에 참인지 거짓인지에 관계없이 항상 한 번은 실행된다. 
 */