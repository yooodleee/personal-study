// 표현식과 구문의 차이

/**
 * 표현식과 구문은 프로그래밍에서 중요한 개념이며 각각 다르게 사용된다. 
 * 
 * 표현식(expression): 하나 이상의 변수, 연산자, 리터럴을 조합해 값을 평가하고 결과를 반환한다. 
 * => 수학에서 계산을 수행하는 수식과 같으며, 결괏값이 항상 나오는 코드를 말한다. 
 * => 피연산자와 연산자로 구성되는 식이나 함수 호출 등이 대표적인 예다.
 * 
 * a = b + c;   // b + c는 표현식
 * result = func(); // func()는 표현식
 * 
 * 구문(statement)은 하나 이상의 연산을 수행하거나 동작을 실행하는 명령문의 집합이다. 
 * => 값을 할당하거나 프로그램의 실행을 제어한다. 
 * => 여러 표현식을 포함할 수 있으며 보통 쌍반점(;)으로 끝난다.
 * 
 * => 즉, 구문은 컴파일러가 이해하고 실행할 수 있는 최소의 독립적인 코드 조각으로 생각하면 된다.
 * => 코드 한 줄부터 여러 줄의 블록까지 구문으로 볼 수 있다. 
 * => 따라서 구문은 다음의 코드처럼 한 개 이상의 표현식과 키워드를 포함할 때가 많다.  
 */

#include <iostream>
using namespace std;

int main()
{
    int a = 0;
    while (true)
    {
        ++a;
        if (a > 10)
            break;
    }
}

// 요약하면 표현식은 값을 생성하거나 계산하는 요소이며, 구문은 프로그램의 실행 흐름을 제어하거나 작업을 실행하는 명령문의 집합이다.