// assert를 이용한 예외 처리

/**
 * 어설션을 이용한 처리
 * 
 * 어설션(assertion)은 코드를 검증하여 에상치 못한 상황에서 프로그램 동작을 중단시키는 도구로,
 * 안전성과 신뢰성을 높여 준다. C++에서는 <cassert> 헤더에 정의된 assert 매크로를 통해 예외를
 * 비교적 간단하게 처리할 수 있다. assert는 디버그 모드에서 오류가 생길 수 있는 부분을 검사할
 * 수 있는 매크로이다. 
 * 
 * assert가 어떻게 동작하는지 알아보자. 
 */

#include <iostream>
#include <cassert>

using namespace std;


void print_number(int* _pt_int) {

	assert(_pt_int != NULL);	// 디버그 모드에서 _pt_int가 널인지 검사 
	cout << *_pt_int << endl;
}

int main() {

	int a = 100;
	int* b = NULL;
	int* c = NULL;

	b = &a;
	print_number(b);

	// c는 NULL인 상태로 인자 전달 
	print_number(c);


	return 0;
}

/*
100
Assertion failed: _pt_int != NULL
*/

/**
 * assert를 이용해 프로그램의 특정 지점에서 true로 예상되는 조건을 지정한다. 
 * 만약 지정한 조건이 true가 아니면 프로그램 실행이 중단되며, 비주얼 스튜디오에서는 
 * 어설션 실패 대화상자가 나타나 어떤 문제가 발생했는지를 알려준다. 
 * 
 * 같은 코드를 릴리즈 모드로 실행하면 assert가 동작하지 않아 프로그램이 강제로 종료되지만,
 * 이때 어떤 문제로 종료됐는지 알 수 없다. 
 * 
 * assert는 주로 개발 과정에서 조건을 검사하여 프로그램이 예상대로 동작하는지 확인하는 데
 * 사용한다. assert를 자주 사용하면 좋은 코딩 습관을 가질 수 있다. 
 */

/**
 * 디버그 모드와 릴리즈 모드
 * 
 * 디버그(debug) 모드는 컴파일할 때 디버깅을 위한 정보들을 삽입해 문제가 발생할 때 원인을 
 * 수월하게 찾을 수 있도록 하는 컴파일 모드다. 이때 디버깅이란 코드에서 버그를 제거하는 것을
 * 의미한다. 
 * 
 * 반면에 릴리즈(release) 모드는 최종 사용자에게 배포할 코드를 만들 때 사용한다. 릴리즈 모드에서는 
 * 최적화가 적용되어 프로그램의 실행 속도가 향상된다. 디버깅 정보, 심벌, 주석 등이 제거되고 실행
 * 파일의 크기가 작아지면서 프로그램 실행에 소요되는 자원과 시간을 줄인다. 
 * 
 * 즉, 개발할 때는 주로 디버그 모드를 사용해 버그를 신속하게 찾아내고, 배포할 때는 릴리즈 모드로 
 * 컴파일하여 최적화된 실행 속도와 작은 실행 파일을 만든다. 
 */

/**
 * assert를 사용할 때 주의할 점 
 * 
 * assert는 디버그 모드에서만 컴파일되므로 다른 코드에 영향을 주지 않는 코드로만 작성해야 한다. 
 * 예컨대 다음 코드는 잘못 사용한 예시다. 
 * => assert (count++ > 0);
 * 
 * assert 검사는 릴리즈 모드에서 수행되지 않으므로 count 값이 디버그 모드와 릴리즈 모드에서 다르다. 
 * 만약 프로그램 로직을 좌우하는 중요한 코드를 assert 구문에 작성한다면, 릴리즈 모드에서는 해당 코드가
 * 빠지므로 심각한 문제가 발생할 수 있다. 이 점만 주의한다면 어설션으로 비교적 간단하게 예외를 처리할 수 
 * 있다. 
 */