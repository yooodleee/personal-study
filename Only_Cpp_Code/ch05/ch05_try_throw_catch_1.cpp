// 예외 처리

/**
 * 예외 처리 구문
 * 
 * 소스 코드에 예외 처리를 해두면 예기치 못한 상황에서도 유연하게 대처할 수 있다. 
 * 이는 프로그램의 안정성을 높이고 설사 오류가 발생하더라도 비정상으로 종료되지 않도록 한다. 
 * 또한 코드를 읽기 쉽게 하고 유지/보수와 디버깅이 쉬워진다. 이는 큰 규모의 프로젝트를 
 * 진행할 때 함께 일하는 개발자들이 코드의 안정성과 이해도를 높이는 데 도움을 준다.
 * 
 * C 언어에서 일반적으로 조건문과 return 문을 이용해 예외를 처리한다. 하지만 로직을 제어하는 
 * 조건문과 예외를 처리하는 조건문이 섞여서 구분하기가 어렵다. 게다가 return 문이 반환하는 
 * 값으로 예외 상황을 구분하는 것도 꽤나 복잡한 일이다. 그래서 C++ 언어에서는 예외가 발생함을
 * 명시적으로 구분하고 예외를 더 간단하게 처리할 수 있도록 몇 가지 문법을 제공하고 있다. 
 * 바로 try, catch, throw 문이다. 
 */

/**
 * try, catch, throw 문으로 예외 처리하기
 * 
 * C++에서 제공하는 try, catch, throw는 예외가 발생할 때 프로그램의 제어 흐름을 변경하고 
 * 예외를 처리하는 데 사용한다. 
 * 
 * => try: 예외가 발생할 수 있는 코드 블록을 중괄호 { }로 감싸 준다. 
 * => throw: 예외를 catch 블록으로 던진다. 
 * => catch: throw로 던진 예외를 받아서 처리한다. 
 * 
 * try {
 * 		// 예외를 던질 수 있는 코드		=> 예외 발생 가능한 코드 블록 
 * 		throw 예외_값;
 * } catch (예외_형식 예외_이름)
 * {
 * 		// 예외를 처리하는 코드 	=> 예외 처리 블록 
 * }
 */


/**
 * C++에서 예외 처리는 try 키워드로 시작한다. 예외가 발생할 수 있는 코드를 try와 함께 
 * 중괄호로 묶는다. 그리고 조건문 등으로 예외인지 판단한 후 throw 명령으로 예외를 던진다. 
 * 예외를 던질 때는 예외를 설명하는 값이나 객체를 함께 전달한다. 만약 try 블록 안에서 
 * 예외가 발생해 throw 문이 실행되면 try 문을 빠져나온다. 이어서 throw로 던진 예외는 
 * catch 블록에서 처리된다. 
 * 
 * 예외를 처리하는 catch 문은 try와 마찬가지로 중괄호 { }를 이용해 블록을 지정할 수 있다. 
 * catch 문에는 예외 형식을 명시할 수 있는데, 이는 throw가 던지는 예외 형식과 일치할 때만 
 * 예외를 처리하도록 한다. 
 */

#include <iostream>
using namespace std;


int main() {
	try
	{
		// throw로 던진 예외는 catch로 받아서 처리한다. 

		int input;
		cout << "정수 중 하나를 입력하세요 : ";
		cin >> input;

		if (input > 0)	// 입력받은 숫자가 양수면 
		{
			cout << "throw 1" << endl;
			throw 1;	// 예외 1 발생(정수 형식 예외)
			cout << "after throw 1" << endl;
		}

		if (input < 0)	// 입력받은 숫자가 음수이면 
		{
			cout << "throw-1.0f" << endl;
			throw - 1.0f;	// 예외 1.0f 발생(부동소수점 형식 예외)
			cout << "after -1.0f" << endl;
		}

		if (input == 0)	// 입력받은 숫자가 0이면 
		{
			cout << "throw Z" << endl;
			throw 'Z';	// 예외 Z 발생(문자 형식 예외)
			cout << "after throw Z" << endl;
		}
	}
	catch (int a)	// 정수 형식 예외 받기 
	{
		cout << "catch" << a << endl;
	}
	catch (float b)	// 부동 소수점 형식 예외 받기 
	{
		cout << "catch" << b << endl;
	}
	catch (char c)	// 문자 형식 예외 받기 
	{
		cout << "catch" << c << endl;
	}

	return 0;
}

/**
 * 정수 중 하나를 입력하세요: 1
 * throw 1
 * catch 1
 */

/**
 * 정수 중 하나를 입력하세요: -1
 * throw -1.0f
 * catch -1
 */

/**
 * 정수 중 하나를 입력하세요: 0
 * throw Z
 * catch Z
 */

/**
 * 정수 1을 입력받았을 떄의 흐름을 따라가 보면서 예외 처리 구문의 동작을 살펴보자. 
 * 1은 양수이므로 try 블록에서 첫 번째 if 문이 실행된다. 첫 번째 실행 결과를 보면
 * throw 1 이전 메시지만 나오고 이후 메시지는 나오지 않았다. 이것으로 throw 이후의
 * 코드는 무시되고 try 구문을 빠져나온다는 것을 확인할 수 있다. 즉, try 블록에서 
 * 차례로 실행되다가 예외가 발생하면 이후 구문은 실행되지 않는다. 
 * 
 * throw 1로 정수 형식의 예외가 발생했으므로 catch 문 가운데 정수 형식의 catch (int a)
 * 문만 실행된다. 나머지 catch 문은 throw로 던진 형식과 달라 실행되지 않는다. 
 * 
 * 두 세 번째 실행 결과도 확인해 보면 throw -1.0f처럼 부동 소수점 형식의 예외가 발생했을 때,
 * 그리고 throw 'Z'처럼 문자 형식의 예외가 발생했을 때도 각각 throw로 던진 것과 같은 데이터
 * 형식의 catch 문이 실행되는 것을 확인할 수 있다. 
 * 
 * 
 * // 예외 발생 시 흐름 
 * try {
 * 		if (...) throw 1;		// 정수 형식 예외 발생
 * 		if (...) throw -1.0f;	// 부동 소수점 형식 예외 발생
 * 		if (...) throw 'Z';		// 문자 형식 예외 발생 
 * }
 * catch (int a) {
 * }
 * catch (float b) {
 * }
 * catch (char) {
 * }
 */