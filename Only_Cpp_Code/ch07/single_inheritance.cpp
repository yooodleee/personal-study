// 단일 상속

/**
 * 상속성과 다형성
 * 
 * 상속성이란 무엇일까?
 * 상속은 클래스를 만들 때 다른 클래스의 멤버를 물려 받는 것이다. 즉, 상속성이란 다양한 특성으로
 * 추상화하고 캡슐화한 클래스를 확장하고 변형하는 방법이다. 이때 상속받은 클래스를 자식 클래스
 * (child class), 파생 클래스(derived class) 혹은 하위 클래스(sub class)라고 한다. 반대로 
 * 상속해주는 클래스를 부모 클래스(parent class), 기본 클래스(base class) 혹은 슈퍼 클래스
 * (super class)라고 한다. 
 * 
 * 부모 속성 상속 받기
 * 앞서 모델링한 몬스터는 체력과 공격력이 있고 데미지를 입으면 체력을 소며하며 기본 공격과 특수
 * 공격을 할 수 있다. 그런데 몬스터가 여러 종류이고 저마다 특수 공격만 다르다고 생각해보자. 먼저
 * 몬스터 종류마다 다른 클래스로 만들 수 있다. 그런데 이렇게 하면 몬스터가 공통으로 가지는 특징은 
 * 부모 클래스로 만들고, 이를 상속받아 특수 공격만 다른 자식 몬스터 클래스를 만들 수 있다. 이렇게 
 * 하면 코드를 중복하지 않아도 되며 특수 공격만 다른 다양한 몬스터를 쉽게 만들 수 있다. 
 * 
 *  *                      (monster)
 *          ----------------------------------
 *          | - hp: int                      |
 *          | - power: int                   |
 *          ----------------------------------
 *          | + get_damage(int) : void       |
 *          | + attack(Player) : void        |
 *          | + attack_special(Player) : void|
 *          ----------------------------------
 * 
 *                    (monster_a)
 *          ---------------------------------
 *          | + attack_special(player): void|
 *          ---------------------------------
 * 
 *                    (monster_b)
 *          ---------------------------------
 *          | + attack_special(player): int |
 *          ---------------------------------
 * 
 *                   (monster_c)
 *          ---------------------------------
 *          | + attack_special(player): void|
 *          ---------------------------------
 * 
 * 이처럼 상속을 이용하면 공통된 특징은 부모 클래스의 멤버를 사용하고 자식 클래스에서는 고유한
 * 특징만 별도로 정의해서 사용할 수 있다. 따라서 부모 클래스는 각 멤버를 일반ㄴ화하여 범용으로
 * 설계하고, 자식 클래스에서는 개별적이거나 특수한 멤버를 가지도록 설계한다. 
 * 
 * 부모 클래스를 대신할 수 있는 자식 클래스
 * 상속에는 중요한 특징이 한 가지 있다. 자식 클래스는 부모 클래스를 대체할 수 있다. 즉, 부모
 * 클래스를 자식 클래스로 치환(substitution)할 수 있어야 한다. 그러려면 부모가 가진 속성과 
 * 기능을 변경해서는 안 된다. 프로그래밍 문법적으로 이야기하면 부모가 외부로 노출한 함수의 
 * 시그니처(signature; 함수의 이름, 매개변수 구성, 반환 형식을 아우르는 말)를 그대로 상속해야
 * 한다. 
 * 
 * 부모 클래스를 자식 클래스로 치환한다는 것은 단순히 형식만 같은 것이 아니라 부모 클래스의 
 * 모든 제약 사항과 동작 방식을 그대로 유지한다는 뜻이다. 이를 '리스코프 치환 원칙'이라고 한다. 
 * 자식 클래스는 어떠한 위치에서도 부모 클래스를 대체할 수 있어야 한다. 
 * 
 * 단일 상속(single inheritance)
 * 상속은 이미 구현된 클래스를 재사용할 수 있는 좋은 방법이다. 클래스를 상속받을 때 부모 클래스를
 * 하나만 지정하면 단일 상속이라고 한다. 앞에서 작성한 몬스터 소스 코드에서 플레이어는 캐릭터
 * 클래스를 하나만 상속받는다. 
 */

#include <iostream>

using namespace std;


class character {
public:
    character() : hp(100), power(100) {};


protected:
    int hp;
    int power;

};


// 단일 상속
class player : public character {   
// 클래스를 상속받을 때 부모 클래스(character)를 하나만 지정하는 경우
public:
    player() {};

};