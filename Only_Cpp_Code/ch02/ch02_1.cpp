// C++ 표준 입출력


/*
C와 C++ 언어의 입출력 비교

C 언어에서는 stdio.h에 있는 scanf, printf를 이용해서 입출력을 한다.
물론 C++ 언어에서도 scanf, printf로 입출력을 할 수 있지만, C++ 언어의 표준 입력과 출력은 iostream에 정의되어 있는 cin, cout을 사용한다.
iostream은 C++ 표준 라이브러리에 포함되며 C++ 언어의 입출력을 위한 헤더 파일이다.
C 언어의 stdio.h와 같은 역할로 이해하면 된다.
*/

/*
소속을 알리는 네임스페이스

네임스페이스(namespace)는 소속을 지정해주는 역할을 한다.
cin, cout 앞에 붙는 std::는 std라는 네임스페이스에 접근할 때 쓰는 표현이다.
std는 standard의 준말로 C++ 언어에서 흔히 사용하는 여러 가지 함수와 클래스, 객체, 유틸리티가 정의된 네임스페이스이다.

네임스페이스는 내부 식별자(identifier)(형식, 함수, 변수 등)에 범위를 부여해 여러 라이브러리를 포함할 때 이름이 충돌하는 것을 방지하고자 사용한다.
코드의 양이 늘거나 다른 사람이 쓴 코드를 가져다 쓸 때 이름이 같은 함수를 사용할 수 있다.
C++에서는 이를 구분할 수 있게 같은 이름이라도 소속된 네임스페이스가 다르면 서로 다른 것으로 취급한다.

즉, std라는 네임스페이스를 통해 화면 입출력을 위한 cin과 cout을 사용할 수 있다.
그런데 만약 출력문 앞에 매번 std::를 붙이는 것이 번거롭다면 소스 앞부분에 `using namespace std` 코드를 작성해 생략할 수 있다.
이 선언문은 "cin, cout 등이 사용될 때 무조건 std에 속한 것을 호출한다."라고 미리 알리는 것이다.

하지만 using namespace std 대신 std::를 매번 표기하는 코드가 더 좋다.
왜냐하면 std 전체 네임스페이스를 가져올 때 이름 선언이 충돌할 수 있기 때문이다.
간단한 연습용 코드에서는 std 라이브러리를 가져와도 괜찮지만, C++가 업그레이드되면서 새로운 함수와 클래스들이 std 네임스페이스에 추가될 때,
사용자 코드에서 사용한 함수나 클래스 이름과 충돌할 수 있다.

일부 컴파일러에서는 오류가 발생해 바로 원인을 알 수도 있지만, 그렇지 않고 이름이 중복된 상태로 컴파일을 통과한다면 프로그램이 
런타임(runtime)(실행 시간) 때 문제가 발생할 수 있다.
런타임 오류는 바로잡는 데 훨씬 많은 노력이 필요하다.
게다가 중요한 부분에서 오류가 발생한다면 겉잡을 수 없는 손해가 발생할 수도 있다.
*/

/*
cout 출력

C 언어에서 출력은 printf 함수를 이용한다.
문자열이나 정수, 부동소수점 등을 출력하는 데 사용되며, %d, %f, %s와 같은 형식 지정자로 출력 형식을 지정해야 한다.
반면에 C++에서는 cout이라는 스트림 객체를 사용한다.
cout을 사용하면 형식 지정자를 사용하지 않고도 문자열이나 정수, 부동 소수점 등을 출력할 수 있다.

cout은 << 연산자로 출력 대상을 전달한다. 연산자가 가리키는 방향은 정보의 흐름을 나타낸다.
<< 을 여러 개 이용하면 연속해서 출력할 수도 있다. 그리고 콘솔에서 줄을 출력할 때는 endl을 사용한다.
endl은 \n처럼 개행 문자 하나를 출력하는데, 이때 출력 버퍼를 비우는 역할을 함께 수행한다.
스트림을 비움으로써 출력이 화면에 바로 나타나도록 한다.

ex) cout 사용 예
    std::cout << 출력 1 << 출력 2 << ... << 출력 n << std::endl;
*/

/*
cin 입력

C 언어에서 사용자나 파일로부터 입력을 받을 때는 scanf 함수를 이용한다.
반면에 C++ 언어에서는 같은 용도로 cin을 사용한다.
cout의 << 연산자와 반대로 cin에서는 >> 연산자를 사용한다.
>> 연산자 다음에는 스트림에서 읽어 온 값을 저장할 변수를 지정한다.

ex) cin 사용 예
    std::cin >> 저장할_변수;

C 언어의 scanf와 다르게 cin에서는 입력받을 데이터의 형식을 나타내는 %c, %d 같은 형식 지정자가 필요 없다.
그런데도 cin은 scanf보다 데이터 형식에 안전하다.
scanf 함수는 입력된 데이터의 형식을 확인하지 않지만, cin은 입력된 데이터의 형식을 확인하고 잘못되었으면 오류가 발생한다.



* 네임스페이스
    * std는 C++ 푲ㄴ 라이브러리에 정의된 네임스페이스로 cout, cin, string 등 자주 사용하는 함수와 객체가 포함되어 있다.
    * cout은 콘솔에 출력할 때 사용하는 표준 출력 스트림 객체다.
    * endl은 스트림을 비우고 줄을 바꾸는 조직자(manipulator)다.
    * cin은 사용자의 입력을 읽을 때 사용하는 표준 입력 스트림 객체다.
    * 
    * using namespace std;      // 네임스페이스 사용 선언
    * 
    * cout << expression << endl;
    * cin >> variable;
*/