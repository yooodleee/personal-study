// 02-3. 변수의 유효 범위와 형식 변환

/*
변수의 유효 범위

변수를 선언했다고 해서 프로그램 어느 곳에서나 사용할 수 있는 것은 아니다.
변수가 선언된 위치에 따라 사용할 수 있는 범위가 결정된다.
예컨대 함수에서 value라는 변수를 선언하면 value는 해당 함수에서만 사용할 수 있다.
이를 지역 범위(local scope)라고 한다.

같은 지역 범위에서 이름이 같은 변수가 없는 '단일 정의 규칙'만 잘 지킨다면, 다른 범위에서는 같은 이름으로 변수를 선언해도 오류가
발생하지 않는다.

C++ 언어에는 더 많은 종류의 범위가 있다.
대표적인 범위를 정리하면 다음과 같다.
    1) 구문 범위:
        if, for, while 등의 구문 안에서만 유효하다.
    2) 지역 범위:
        매개변수 이름을 포함하여 함수 안에 선언한 이름은 해당 함수 내에서만 유효하다.
        지역 범위는 블록 범위(block scope)라고도 한다.
    3) 전역 범위:
        네임스페이스나 클래스, 함수 등에 속하지 않고 외부에 선언한 이름이다.
        선언 지점부터 파일 끝까지 유효하다.
    4) 클래스 범위:
        클래스 멤버의 이름은 선언 지점에 관계없이 클래스 정의 전체에 걸쳐 확장된다.
        클래스 멤버에 대한 접근성은 접근 지정자(public, private)로 제어할 수 있다.
    5) 네임스페이스 범위:
        네임스페이스 안에 선언한 이름은 네임스페이스 안에서만 유효하다.
        네임스페이스는 서로 다른 파일들의 여러 블록에서 선언될 수 있다.


지역 범위 내에 전역 변수와 이름이 같은 변수가 없다면 컴파일러는 전역 변수에 접근한다.
그러나 지역 범위 내에 전역 변수와 이름이 같은 변수가 있다면 지역 변수의 우선권이 더 높다.
이때 전역 범위 연산자:: 를 사용하면 전역 변수에 접근할 수 있다.

하지만 전역 변수와 이름이 같은 지역 변수를 정의하는 것은 피해야 한다.
의도치 않은 실수가 발생할 수 있기 때문이다.
전역 변수에는 'g_'와 같은 접두사를 붙여 g_value처럼 정의한다면 이름만으로도 지역 변수와 구분할 수 있어 실수를 방지할 수 있다.
*/

/*

*/