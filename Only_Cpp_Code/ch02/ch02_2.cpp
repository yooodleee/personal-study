// 02-2. 데이터 형식


/*
프로그래밍에서 말하는 변수란 '값을 저장할 수 있는 공간'이다.
C++ 언어에서는 변수에 값을 저장하기 전에 정수, 부동 소수점, 문자 등 어떤 값을 저장할지 미리 정해주어야 한다.
이를 데이터 형식(data type)(자료형)이라고 한다.
데이터 형식은 프로그래밍에서 가장 기본적인 요소다.

파이썬 같은 인터프리터 언어는 변수의 형식을 자동으로 결정해 준다.
반면에 C, C++ 같은 컴파일 언어는 형식을 직접 지정해 주어야 한다.
형식이 엄격한 언어는 변수를 선언하고 사용할 때 어떤 형식으로 만들지 항상 고민해야 한다.
파이썬처럼 형식이 유연한 언어보다 훨씬 까다롭지만, 런타임 오류도 줄고 메모리를 효율적으로 이용할 수 있다는 장점이 있다.
*/

/*
C++의 데이터 형식 분류


C++ 언어의 데이터 형식은 크게 5가지로 분류할 수 있다.
각 분류에 속하는 주요 형식은 다음과 같다.
세부 형식은 이보다 많지만 자주 사용하는 것 위주로 정리했다.

C++ 데이터 형식

    1) 보이드
        - void: (none)
            void는 형식 없음을 의미함.

    2) 불리언
        - bool: (1)
            true, false 표현, C 언어에서도 지원(C99, stdboolh)

    3) 문자
        - char: (1)
            8비트 정수형으로 사용할 경우 일반적으로는 -128 ~ 127, 
            C++ 언어 표준에서는 적어도 -127 ~ 127 범위 지정
        - unsigned char: (1)
            0 ~ 255
        - signed char: (1)
            부호 비트를 가지도록 명시적 표현
        - char8_t: (1)
            C++20의 새 형식
        - char16_t: (2)
            UTF-16 문자 표현에 사용
        - char32_t: (4)
            UTF-32 문자 표현에 사용
        - wchar_t: (2)
            와이드 문자(wide character) 표현
        - __wchar_t: (2)
            마이크로소프트 전용

    4) 정수
        - short: (2)
            적어도 char보다는 크기가 큰 정수 형식
        - unsigned short: (2)
            양수만 저장
        - int: (4)
            일반적으로 가장 많이 사용하는 정수 형식
        - unsigned int: (4)
            양수만 저장
        - __int8, __int16, __int32, __int64: (1), (2), (4), (8)
            마이크로소프트 전용 정수 형식
            __int8은 char와 동일하게 취급
            __int16은 short, __int32는 int, __int64는 long long과 같은 데이터 형식으로 간주
        - long: (4)
            long의 경우 32비트 운영체제에서는 4byte(32bit),
            64비트 운영체제에서는 8byte(64bit)인데, 윈도우 64bit에서는 long도 4byte로 취급
        - unsigned long: (4)
            양수만 저장
        - long long: (8)
            int 형 연산에서 초과되는 범위를 다룰 때 사용
            적어도 8byte 이상의 크기를 보장(C++11 이후)
        - unsigned long long: (8)
            양수만 저장

    5) 부동 소수점
        - float: (4)
            C++ 언어에서 가장 작은 부동 소수점 형식
        - double: (8)
            float보다 큰 부동 소수점 형식
            소수를 구해야 하는 연산에서는 double이 소수점 아래 표현을
            더 많이 할 수 있으니 double을 추천
        - long double: (8)
            GCC, G++ 에서는 long double이 16byte
*/

/*
* __int8, __int16, __wchar_t는 어떤 형식인가?

데이터 형식 앞에 '__' 이 붙는 것은 마이크로소프트에서 제공하는 확장형이다.
C++ 표준은 아니며 마이크로포스트 비주얼 C++ 컴파일에서만 인식할 수 있다.
이러한 마이크로포스트 확장형은 특정 환경에서만 지원되며 호환성이 떨어질 수 있으므로 이를 대체하는 int8_t, wchar_t 같은
표준 C++ 자료형을 사용하는 것이 좋다.
*/

/*
형식이 없음을 나타내는 void

C++에서 void는 형식이 없음을 타나낸다.
따라서 void 형으로는 다음처럼 변수를 선언할 수 없다.

ex) void형 변수 선언(컴파일 오류)
    void value;

그럼 void 형은 언제 사용할까?
void 형은 3가지 상황에서 사용한다. 첫 번째는 함수가 값을 반환하지 않음을 표시할 때다.
다음 코드에서는 print_func 함수에는 값을 반환하는 return 문이 없다.
이처럼 반환값이 없는 함수를 선언할 때 void를 사용한다.

ex) 함수가 값을 반환하지 않을 때
    void prinf_func()
    {
        std::cout << "func" << std::endl;
    }

두 번째는 함수의 매개변수가 없음을 표시할 때이다.
물론 함수의 매개변수가 없으면 아무것도 입력하지 않은 채 () 처럼 빈 괄호로 두어도 된다.
하지만 다음 코드처럼 void로 표시하면 매개변수가 없음을 명시적으로 나타낼 수 있다.

ex) 매개변수가 없음을 표시할 때
    int input_func(void)
    {
        int input_value;
        std::cin >> input_value;
        
        return input_value;
    }

세 번째는 어떤 변수라도 가리킬 수 있는 제네릭 포인터(generic pointer)를 만들 때 사용할 수 있다.
제네릭 포인터에서 void는 단순히 '형태가 없음'을 의미하기 보다 '형태가 자유로움'을 의미한다고 이해하는 편이 좋다.

ex) 모든 자료형을 가리킬 수 있는 제네릭 포인터로 사용할 때
    int int_value;
    float float_value;
    void *ptr_value;
    
    ptr_value = &int_value;
    ptr_value = &float_value;

*/