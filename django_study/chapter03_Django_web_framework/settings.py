"""
Template = 화면 UI 정의

장고가 클라이언트에게 반환하는 최종 응답은 HTML 텍스트이다.
개발자가 응답에 사용할 *.html 파일을 작성하면, 장고는 이를 해석해서 최종 HTML 텍스트 응답을 생성하고,
이를 클라이언트에게 보내준다. 클라이언트(보통 웹 브라우저)는 응답으로 받은 HTML 텍스트를 해석해서 우리가 
보는 웹 브라우저 화면에 UI를 보여주는 것이다.

이런 과정에서 개발자가 작성하는 *.html 파일을 템플릿이라 부르며, 여기에 화면 UI 모습을 템플릿 문법에 맞게 작성한다.

장고는 자체 템플릿 엔진을 갖고 있기 때문에 디자이너도 쉽게 이해할 수 있는 문법을 제공한다.
화면의 디자인을 변경할 일이 생기면 디자이너는 프로그램 로직에 상관없이 문법에 맞게 템플릿만 수정하면 되므로,
디자이너와 개발자 간에 협업이 편리해졌다.
또한 장고에서 제공하는 템플릿은 템플릿 태그/필터 기능을 사용하여 파이썬 코드를 직접 사용할 수 있기 때문에 더욱 강력하고 확장하기 
쉬운 구조로 되어 있다.

템플릿 파일은 *.html 확장자를 가지며, 장고의 템플릿 시스템 문법에 맞게 작성한다.
유의할 점은 템플릿 파일을 적절한 디렉터리에 위치시켜야 한다는 점이다. 
즉, 장고에서 템플릿 파일을 찾는 방식을 이해하고 있어야 하며, 장고는 그에 맞는 위치에 템플릿 파일이 위치해야 템플릿 파일으 찾을 수 있다.

장고에서 템플릿 파일을 찾을 때는 TEMPLATE_DIRS 및 INSTALLED_APPS에서 지정된 앱의 디렉터리를 검색한다.
이 항목들은 프로젝트 설정 파일인 settings.py 파일에 정의되어 있다.
여러 개의 디렉터리를 지정할 수 있는데, 지정된 순서대로 디렉터리를 검색하여 템플릿 파일을 찾는다.
"""
import os

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiels',
    'polls.apps.PollsConfig',
]

TEMPLATES = [
    {
        ...
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        ...
    }
]

'''
순서대로 템플릿 디렉터리를 검색하여 템플릿 파일을 찾는다.
TEMPLATES 항목에 정의된 디렉터리를 먼저 찾고, 그 다음에 INSTALLED_APPS 항목에 등록된 각 앱의 
templates 디렉터리를 찾는다는 점을 유의한다.
'''