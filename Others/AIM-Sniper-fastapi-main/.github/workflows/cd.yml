name: CD (Continuous Deploy)

on:
  repository_dispatch:
    types: [FASTAPI_FINISH_TRIGGER]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/aim-fastapi-server
  VERSION: ${{ github.sha }}
  NAME: aim-fastapi-server

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Create .env file for CD
      run: |
        echo "HOST=${{ secrets.HOST }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "FASTAPI_PORT=${{ secrets.FASTAPI_PORT }}" >> .env
        echo "MY_IP=${{ secrets.MY_IP }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" >> .env
        echo "SERVER_CERTIFICATE=svr.crt" >> .env
        echo "SERVER_PRIVATE=svr.key" >> .env
        echo "CLIENT_CA_CERTIFICATE=CA.pem" >> .env

    - name: Create certificate files
      run: |
        echo "${{ secrets.SVR_CERT }}" | base64 --decode > svr.crt
        echo "${{ secrets.SVR_KEY }}" | base64 --decode > svr.key
        echo "${{ secrets.CA_PEM }}" | base64 --decode > CA.pem

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Check for created files
      run: |
        ls -l
    
    - name: Configure AWS IAM Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        if [ -f requirements.txt ]; then
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        else
          echo "requirements.txt not found"
          exit 1
        fi

    - name: Configure Docker
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker Layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ env.VERSION }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker BuildKit
      run: |
        echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/${{ github.actor }}/aim-fastapi-server:latest
        platforms: linux/arm64
        build-args: |
          --no-cache
