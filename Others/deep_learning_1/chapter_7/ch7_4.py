#합성곱/풀링 계층 구현하기(4차원 배열)
import numpy as np

x=np.random.rand(10,1,28,28)    #높이28,너비28,채널1,데이터10(데채너높)
print(x.shape)
#(10, 1, 28, 28)

print(x[0].shape)
#(1, 28, 28)

print(x[1].shape)
#(1, 28, 28)

print(x[0,0])   #또는 x[0][0]

#im2col로 데이터 전개하기
'''
합성곱 연산을 곧이곧대로 구현하려면 for 문을 겹겹이 써야된다.
이 과정은 매우 복잡하고, numpy에 for 문을 사용하면 성능이 떨어진다는 단점도 있다.
(넘파이에서는 원소에 접근할 때 for 문을 사용하지 않는 것이 바람직하다.)

im2col은 입력 데이터를 필터링(가중치 계산)하기 좋게 전개하는(펼치는) 함수이다.
3차원 입력 데이터에 im2col을 적용하면 2차원 행렬로 바뀐다.
(정확히는 배치 안의 데이터 수까지 포함한 4차원 데이터를 2차원으로 변환한다.)

im2col은 필터링하기 좋게 입력 데이터를 전개한다.
입력 데이터에서 필터를 적용하는 영역(3차원 블록)을 한 줄로 늘어 놓는다.
이 전개를 필터를 적용하면 모든 영역에서 수행하는 게 im2col이다.

필터 적용이 겹치게 되면 im2col로 전개한 후의 원소 수가 원래 블록의 원소 수보다 많아진다.
그래서 im2col을 사용해 구현하면 메모리를 더 많이 소비하는 단점이 있다.
하지만 컴퓨터는 큰 행렬을 묶어서 계산하는 데 탁월하다.

행렬 게산 라이브러리(선형 대수 라이브러리) 등은 행렬 계산에 고도로 최적화되어 큰 행렬의 곱셈을\
빠르게 계산할 수 있다.
그래서 문제를 행렬 계산으로 만들면 선형 대수 라이브러리를 활용해 효율을 높일 수 있다.

*im2col

image to column(이미지에서 행렬로)
카페cafe와 체어너chainer 등의 딥러닝 프레임워크는 im2col이라는 이름의 함수를 만들어 합성곱\
계층을 구현할 때 이용하고 있다.

im2col로 입력 데이터를 전개한 다음에는 합성곱 계층의 필터(가중치)를 1열로 전개하고,\
두 행렬의 곱을 계산하면 된다.
-> 완전 연결 계층의 Affine 계층에서 한 것과 거의 같다.

*필터를 세로로 1열로 전개하고, im2col이 전개한 데이터와 행렬 곱을 계산한다.
마지막으로 출력 데이터를 변형(reshape)한다.

im2col 방식으로 출력한 결과는 2차원 행렬이다.
CNN은 데이터를 4차원 배열로 저장하므로 2차원 출력 데이터를 4차원으로 변형reshape한다.
'''